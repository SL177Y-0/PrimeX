# Docker Compose for PrimeX Development Environment
version: '3.8'

services:
  # WebSocket Server
  websocket:
    build:
      context: ..
      dockerfile: docker/websocket/Dockerfile
      args:
        - NODE_ENV=development
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - PORT=8080
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - WS_PORT=8080
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=debug
    volumes:
      - ../server/websocket:/app
      - /app/node_modules
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - primex-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - primex-network

  # PostgreSQL for local development (optional)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=primex_dev
      - POSTGRES_USER=primex
      - POSTGRES_PASSWORD=primex_dev_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../supabase/migrations:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - primex-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - websocket
    restart: unless-stopped
    networks:
      - primex-network

volumes:
  redis_data:
  postgres_data:

networks:
  primex-network:
    driver: bridge
